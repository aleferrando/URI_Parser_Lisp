;;; -*- Mode: Lisp -*-

;; Alessandro Ferrando 830405
;; Borgato Jacopo 866305

(defstruct uri-s scheme userinfo host port path query fragment display)

(defun consume-list (list-1 list-2)
  (cond ((null list-1) list-2)
	((null list-2) list-1)
	(t (consume-list (rest list-1) (rest list-2)))))

(defun check-host (uri-host)
  (cond ((null uri-host) nil)
	((and (eql (first uri-host) #\.)
	      (null (rest uri-host)))
	 (error "invalid host"))
	(t (check-host (rest uri-host)))))

(defun is-alpha (char-val)
  (if (or (and (char>= char-val #\a)
	       (char<= char-val #\z))
	  (and (char>= char-val #\A)
	       (char<= char-val #\Z))) t
    nil))

(defun check-zos-path (zos-path)
  (check-zos-path-id8 (check-zos-path-id44 zos-path 0) 0))

(defun check-zos-path-id44 (zos-id44 cnt)
  (cond ((null zos-id44) nil)
	((= cnt 0)
	 (if (is-alpha (first zos-id44))
	     (check-zos-path-id44 (rest zos-id44) 1)
	   (error "invalid id44")))
	((> cnt 44) (error "too long id44"))
	((not (null (rest zos-id44)))
	 (cond ((and (eql (first zos-id44) #\.)
		     (eql (second zos-id44) #\())
		(error "invalid id44"))
	       ((and (not (alphanumericp (first zos-id44)))
		     (not (eql (first zos-id44) #\.))
		     (not (eql (second zos-id44) #\()))
		(error "invalid char id44"))
	       ((eql (second zos-id44) #\()
		(cdr (cdr zos-id44)))
	       (t (check-zos-path-id44 (rest zos-id44) (+ cnt 1)))
	       ))
	((and (eql (first zos-id44) #\.)
	      (null (rest zos-id44)))
	 (error "invalid id44"))
	((and (not (alphanumericp (first zos-id44)))
	      (null (rest zos-id44)))
	 (error "invalid id44"))
	(t (check-zos-path-id44 (rest zos-id44) (+ cnt 1)))))

(defun check-zos-path-id8 (zos-id8 cnt)
  (cond ((= cnt 0)
	 (cond ((null zos-id8) nil)
	       ((is-alpha (first zos-id8))
		(check-zos-path-id8 (rest zos-id8) 1))
	       (t (error "invalid id8"))))
	((> cnt 8) (error "too long id8"))
	((and (eql (first zos-id8) #\))
	      (null (rest zos-id8)))
	 nil)
	((and (not (eql (first zos-id8) #\)))
	      (null (rest zos-id8)))
	 (error "invalid id8"))
	((and (not (alphanumericp (first zos-id8)))
	      (not (eql (first zos-id8) #\))))
	 (error "invalid char id8"))
	((null zos-id8) nil)
	(t (check-zos-path-id8 (rest zos-id8) (+ cnt 1)))))

(defun get-autority (uri-list aut-part scheme-str)
  (cond ((string-equal scheme-str "mailto")
	 (get-autority-mailto uri-list aut-part))
	((or (string-equal scheme-str "news")
	     (string-equal scheme-str "fax")
	     (string-equal scheme-str "tel"))
	 (get-autority-nft uri-list aut-part))
	(t (get-autority-gen uri-list aut-part))))

(defun after-parse (uri-struct)
  (check-host (coerce (uri-s-host uri-struct) 'list))
  (cond ((string-equal (uri-s-scheme uri-struct) "zos")
	 (check-zos-path (coerce (uri-s-path uri-struct) 'list))))
  (cond ((string-equal (uri-s-scheme uri-struct) "mailto")
	 (if (and (null (uri-s-userinfo uri-struct))
		  (not (null (uri-s-host uri-struct))))
	     (error "invalid mailto")))
	(t (if (and (not (null (uri-s-userinfo uri-struct)))
		    (null (uri-s-host uri-struct)))
	       (error "invalid")))))

(defun get-autority-mailto (uri-list aut-part)
  (cond ((null uri-list) nil)
	((and (= aut-part 0)
	      (eql (first uri-list) #\:))
	 (get-autority-mailto (rest uri-list) 1))
	((and (= aut-part 1)
	      (eql (first uri-list) #\@))
	 (cons (first uri-list) (get-autority-mailto (rest uri-list) 2)))
	((and (= aut-part 2)
	      (eql (first uri-list) #\@))
	 (error "invalid mailto host"))
	((and (/= aut-part 0)
	      (member (first uri-list) '(#\/ #\? #\# #\:)))
	 (error "invalid mailto"))
	(t (if (= aut-part 0)
	       (get-autority-mailto (rest uri-list) 0)
	     (cons (first uri-list)
		   (get-autority-mailto (rest uri-list) aut-part))))))

(defun get-autority-nft (uri-list aut-part)
  (cond ((null uri-list) nil)
	((and (= aut-part 0)
	      (eql (first uri-list) #\:))
	 (get-autority-nft (rest uri-list) 1))
	((and (= aut-part 1)
	      (member (first uri-list) '(#\/ #\? #\# #\@ #\:)))
	 (error "invalid character"))
	(t (if (= aut-part 0)
	       (get-autority-nft (rest uri-list) 0)
	     (cons (first uri-list)
		   (get-autority-nft (rest uri-list) aut-part))))))

(defun mini-check-gen-aut (after-slash)
  (cond ((null after-slash)
	 (error "invalid autority"))
	((member (first after-slash) '(#\/ #\? #\# #\:))
	 (error "invalid autority"))))

(defun get-autority-gen (uri-list aut-part)
  (cond ((null uri-list) nil)
	((eql (first uri-list) #\/)
	 nil)
	((and (= aut-part 0)
	      (eql (first uri-list) #\:)
	      (eql (second uri-list) #\/)
	      (eql (third uri-list) #\/))
	 (mini-check-gen-aut (cdr (cdr (cdr uri-list))))
	 (get-autority-gen (cdr (cdr (cdr uri-list))) 1))
	((and (= aut-part 1)
	      (eql (first uri-list) #\@))
	 (cons (first uri-list) (get-autority-gen (rest uri-list) 2)))
	((and (or (= aut-part 1)
		  (= aut-part 2))
	      (eql (first uri-list) #\:))
	 (cons (first uri-list) (get-autority-gen (rest uri-list) 3)))
	((and (/= aut-part 0)
	      (member (first uri-list) '(#\/ #\? #\#)))
	 nil)
	((and (= aut-part 3)
	      (not (member (first uri-list)
			   '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9))))
	 (error "invalid port"))
	((and (or (= aut-part 2)
		  (= aut-part 1))
	      (eql (first uri-list) #\@))
	 (error "invalid path syntax"))
	(t (if (= aut-part 0)
	       (get-autority-gen (rest uri-list) 0)
	     (cons (first uri-list)
		   (get-autority-gen (rest uri-list) aut-part))))))

(defun get-after-autority (uri-list aut-list)
  (cond ((eql (first uri-list) #\:)
	 (if (and (eql (second uri-list) #\/)
		  (eql (third uri-list) #\/))
	     (consume-list (cdr (cdr (cdr uri-list))) aut-list)
	   (consume-list (rest uri-list) aut-list)))
	(t (get-after-autority (rest uri-list) aut-list))))

(defun parse-uri-scheme (uri-list)
  (if (null uri-list) (error "invalid scheme syntax")
    (let ((curc (first uri-list)))
      (cond ((or (eql curc #\/)
		 (eql curc #\?)
		 (eql curc #\#)
		 (eql curc #\@))
	     (error "invalid scheme syntax"))
	    ((and (eql curc #\:))
	     nil)
	    (t (cons curc (parse-uri-scheme (rest uri-list))))))))

(defun parse-uri-userinfo (uri-list scheme-str)
  (cond ((string-equal scheme-str "mailto")
	 (parse-uri-userinfo-mailto uri-list 0))
	((string-equal scheme-str "news") nil)
	((or (string-equal scheme-str "fax")
	     (string-equal scheme-str "tel"))
	 (parse-uri-userinfo-ft uri-list 0))
	(t (parse-uri-userinfo-gen uri-list 0))))

(defun parse-uri-userinfo-ft (uri-list cnt)
  (cond ((null uri-list) nil)
	((member (first uri-list) '(#\/ #\? #\# #\@ #\:))
	 (error "invalid userinfo"))
	(t (cons (first uri-list)
		 (parse-uri-userinfo-mailto (rest uri-list) cnt)))))

(defun parse-uri-userinfo-mailto (uri-list cnt)
  (cond ((null uri-list) nil)
	((eql (first uri-list) #\@) nil)
	((member (first uri-list) '(#\/ #\? #\# #\:))
	 (error "invalid userinfo"))
	(t (cons (first uri-list)
		 (parse-uri-userinfo-mailto (rest uri-list) cnt)))))

(defun parse-uri-userinfo-gen (uri-list cnt)
  (cond ((not (member #\@ uri-list)) nil)
	((or (and (null uri-list) (= cnt 0))
	     (and (eql (first uri-list) #\@) (= cnt 0)))
	 (error "invalid userinfo"))
	((null uri-list) nil)
	(t (cond ((eql (first uri-list) #\@) nil)
		 ((or (eql (first uri-list) #\/)
		      (eql (first uri-list) #\?)
		      (eql (first uri-list) #\#)
		      (eql (first uri-list) #\:))
		  (error "invalid userinfo"))
		 (t (cons (first uri-list)
			  (parse-uri-userinfo-gen (rest uri-list) 1)))))))

(defun get-after-user (uri-aut scheme-str)
  (cond ((string-equal scheme-str "mailto")
	 (get-after-user-mailto uri-aut))
	((or (string-equal scheme-str "news")
	     (string-equal scheme-str "tel")
	     (string-equal scheme-str "fax"))
	 uri-aut)
	(t (get-after-user-gen uri-aut 0))))

(defun get-after-user-mailto (uri-aut)
  (cond ((not (member #\@ uri-aut)) nil)
	((null uri-aut) nil)
	((eql (first uri-aut) #\@)
	 (if (null (rest uri-aut))
	     (error "invalid host")
	   (rest uri-aut)))
	(t (get-after-user-mailto (rest uri-aut)))))

(defun get-after-user-gen (uri-aut cnt)
  (cond ((not (member #\@ uri-aut)) uri-aut)
	((null uri-aut) nil)
	((and (= cnt 0)
	      (eql (first uri-aut) #\@))
	 (get-after-user-gen (rest uri-aut) 1))
	((= cnt 0)
	 (get-after-user-gen (rest uri-aut) cnt))
	(t (cons (first uri-aut)
		 (get-after-user-gen (rest uri-aut) cnt)))))

(defun parse-uri-host (uri-list scheme-str)
  (cond ((or (string-equal scheme-str "mailto")
	     (string-equal scheme-str "news"))
	 (parse-uri-host-mn uri-list))
	((or (string-equal scheme-str "tel")
	     (string-equal scheme-str "fax"))
	 nil)
	(t (parse-uri-host-gen uri-list 0))))

(defun parse-uri-host-mn (uri-list)
  (cond ((null uri-list) nil)
	((member (first uri-list) '(#\/ #\? #\# #\@ #\:))
	 (error "invalid host"))
	(t (cons (first uri-list)
		 (parse-uri-host-mn (rest uri-list))))))

(defun parse-uri-host-gen (uri-list cnt)
  (cond ((and (= cnt 0)
	      (null uri-list)) nil)
	((null uri-list) nil)
	((= cnt 0)
	 (if (or (eql (first uri-list) #\/)
		 (eql (first uri-list) #\:)
		 (eql (first uri-list) #\.))
	     (error "invalid host syntax")
	   (cons (first uri-list)
		 (parse-uri-host-gen (rest uri-list) 1))))
	((or (eql (first uri-list) #\/)
	     (eql (first uri-list) #\:))
	 nil)
	(t (cons (first uri-list)
		 (parse-uri-host-gen (rest uri-list) 1)))))

(defun parse-uri-port (uri-list)
  (let ((uri-port (parse-uri-port-gen uri-list 0)))
    (if (null uri-port)
	'(#\8 #\0)
      uri-port)
    )
  )

(defun parse-uri-port-gen (uri-list cnt)
  (cond ((and (= cnt 0)
	      (not (member #\: uri-list)))
	 nil)
	((and (= cnt 1)
	      (null uri-list))
	 (error "invalid port"))
	((null uri-list) nil)
	((and (= cnt 0)
	      (eql (first uri-list) #\:))
	 (parse-uri-port-gen (rest uri-list) 1))
	((and (/= cnt 0)
	      (member (first uri-list)
		      '(#\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9)))
	 (cons (first uri-list)
	       (parse-uri-port-gen (rest uri-list) 2)))
	(t (parse-uri-port-gen (rest uri-list) cnt))))

(defun parse-uri-path (uri-list cnt)
  (cond ((null uri-list) nil)
	((and (eql (first uri-list) #\/)
	      (not (null (rest uri-list)))
	      (= cnt 0)
	      (or (eql (second uri-list) #\/)
		  (eql (second uri-list) #\:)
		  (eql (second uri-list) #\@)))
	 (error "invalid path syntax"))
	((and (= cnt 0)
	      (eql (first uri-list) #\/))
	 (parse-uri-path (rest uri-list) 1))
	((or (eql (first uri-list) #\@)
	     (eql (first uri-list) #\:))
	 (error "invalid path syntax"))
	((and (eql (first uri-list) #\/)
	      (not (null (rest uri-list)))
	      (eql (second uri-list) #\/))
	 (error "invalid path syntax"))
	((or (eql (first uri-list) #\?)
	     (eql (first uri-list) #\#))
	 nil)
	(t (cons (first uri-list)
		 (parse-uri-path (rest uri-list) 1)))))

(defun parse-uri-query (uri-list cnt)
  (cond ((and (null uri-list) (= cnt 0)) nil)
	((and (eql (first uri-list) #\#) (= cnt 0)) nil)
	(t 
	 (cond 
	  ((= cnt 0)
	   (if (eql (first uri-list) #\?)
	       (parse-uri-query (rest uri-list) 1)
	     (parse-uri-query (rest uri-list) 0)))
	  ((or (eql (first uri-list) #\#) (null uri-list))
	   (if (= cnt 1)
	       (error "invalid query")
	     nil))
	  (t (cons (first uri-list)
		   (parse-uri-query (rest uri-list) 2)))))))

(defun parse-uri-fragment (uri-list cnt)
  (cond
   ((null uri-list)
    (if (= cnt 1)
	(error "invalid fragment")
      nil))
   ((= cnt 0)
    (if (eql (first uri-list) #\#)
	(parse-uri-fragment (rest uri-list) 1)
      (parse-uri-fragment (rest uri-list) 0)))
   ((= cnt 2)
    (if (not (null uri-list))
	(cons (first uri-list) (parse-uri-fragment (rest uri-list) 2))
      nil))
   (t (cons (first uri-list) (parse-uri-fragment (rest uri-list) 2)))))

(defun void-to-nil (chk-str)
  (if (equal chk-str "")
      nil
    chk-str))

(defun port-to-int (chk-str)
  (if (equal chk-str "")
      nil
    (parse-integer chk-str)))

(defun parse-struct (uri)
  (let ((uri-list (coerce uri 'list))
	(scheme-str (coerce (parse-uri-scheme (coerce uri 'list)) 'string)))
    (make-uri-s
     :scheme scheme-str
     :userinfo (void-to-nil (coerce (parse-uri-userinfo
				     (get-autority uri-list 0 scheme-str)
				     scheme-str) 'string))
     :host (void-to-nil (coerce (parse-uri-host
				 (get-after-user
				  (get-autority uri-list 0 scheme-str)
				  scheme-str)
				 scheme-str) 'string))
     :port (port-to-int (coerce (parse-uri-port
				 (get-autority uri-list 0 scheme-str)
				 ) 'string))
     :path (void-to-nil (coerce (parse-uri-path
				 (get-after-autority uri-list
						     (get-autority
						      uri-list 0
						      scheme-str)) 0)
				'string))
     :query (void-to-nil (coerce (parse-uri-query
				  (get-after-autority uri-list
						      (get-autority
						       uri-list 0
						       scheme-str)) 0)
				 'string))
     :fragment (void-to-nil (coerce (parse-uri-fragment
				     (get-after-autority uri-list
							 (get-autority
							  uri-list 0
							  scheme-str)) 0)
				    'string)))))

(defun uri-parse (uri)
  (let ((uri-struct (parse-struct uri)))
    (after-parse uri-struct)
    uri-struct))

(defun uri-scheme (uri-struct)
  (uri-s-scheme uri-struct))
(defun uri-userinfo (uri-struct)
  (uri-s-userinfo uri-struct))
(defun uri-host (uri-struct)
  (uri-s-host uri-struct))
(defun uri-port (uri-struct)
  (uri-s-port uri-struct))
(defun uri-path (uri-struct)
  (uri-s-path uri-struct))
(defun uri-query (uri-struct)
  (uri-s-query uri-struct))
(defun uri-fragment (uri-struct)
  (uri-s-fragment uri-struct))
(defun uri-display (uri-struct &optional stream-opt)
  (let ((stream-out ((lambda (ckstrm)
		       (if (null ckstrm) t ckstrm)
		       ) stream-opt)))
    (format stream-out "Scheme:    ~A~C"
	    (uri-s-scheme uri-struct) #\linefeed)
    (format stream-out "Userinfo:  ~A~C"
	    (uri-s-userinfo uri-struct) #\linefeed)
    (format stream-out "Host:      ~A~C"
	    (uri-s-host uri-struct) #\linefeed)
    (format stream-out "Port:      ~A~C"
	    (uri-s-port uri-struct) #\linefeed)
    (format stream-out "Path:      ~A~C"
	    (uri-s-path uri-struct) #\linefeed)
    (format stream-out "Query:     ~A~C"
	    (uri-s-query uri-struct) #\linefeed)
    (format stream-out "Fragment:  ~A~C"
	    (uri-s-fragment uri-struct) #\linefeed)))
